// statement

statement <- if_statement | while_statement | do_statement | for_statement | continue_statement | break_statement | switch_statement | return_statement | try_statement | co_statement | expression_statement | empty_statement

block_statement <- variable_declaration | statement

if_statement <- if ( expression ) block else block | if ( expression ) block

while_statement <- while ( expression ) block

do_statement <- do block while ( expression ) ;

for_statement <- 

continue_statement <- continue ;

break_statement <- break ;

switch_statement <-

return_statement <- return expression ; | return ;

try_statement <-

throw_statement <- throw expression ;

co_statement <- co expression ;

expression_statement <- statement_expression ;

empty_statement <- ;

// expression

expression <- ( expression ) | assignment_expression

statement_expression <- assignment_expression

assignment_expression <- $identifier assignment_operator expression

lambda_expression <- func ( function_call_parameter ) type_expression? block

call_expression <- 

array_access_expression <- $identifier [ expression ]

type_expression <- 

// modifier

function_modifiers <- 

variable_modifiers <-

// other


function_decl_parameter <- variable_declaration , function_decl_parameter | variable_declaration

function_call_parameter <-

block <- { block_statements? }

block_statements <- block_statement block_statements | block_statement

case_label <- case : 

default_label <- default :

assignment_operator <- | *= | /= | %= | += | -= | <<= | >>= | &= | ^= | |=

